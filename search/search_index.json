{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Indonesia Name and Address Preprocessor \u00b6 Indonesia Name and Address Preprocessor Documentation: https://kloworizer.github.io/nama_alamat GitHub: https://github.com/kloworizer/nama_alamat PyPI: https://pypi.org/project/nama_alamat/ Free software: MIT Features \u00b6 Preprocessing Indonesia name and address. Instalation \u00b6 pip install nama-alamat Usage \u00b6 example of name preproccesing: from nama_alamat.preprocessing import Preprocessing preprocessing_nama = Preprocessing(tipe='nama') strings = 'IR SULAEMAN' print(preprocessing_nama.preprocessing(strings)) address preproccesing: from nama_alamat.preprocessing import Preprocessing preprocessing_alamat = Preprocessing(tipe='alamat') strings = 'JALAN GARUDA IX BLOK C/3 RT 003 RW 002, JAKARTA UTARA, DKI JAKARTA 12110' print(preprocessing_alamat.preprocessing(strings)) Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#indonesia-name-and-address-preprocessor","text":"Indonesia Name and Address Preprocessor Documentation: https://kloworizer.github.io/nama_alamat GitHub: https://github.com/kloworizer/nama_alamat PyPI: https://pypi.org/project/nama_alamat/ Free software: MIT","title":"Indonesia Name and Address Preprocessor"},{"location":"#features","text":"Preprocessing Indonesia name and address.","title":"Features"},{"location":"#instalation","text":"pip install nama-alamat","title":"Instalation"},{"location":"#usage","text":"example of name preproccesing: from nama_alamat.preprocessing import Preprocessing preprocessing_nama = Preprocessing(tipe='nama') strings = 'IR SULAEMAN' print(preprocessing_nama.preprocessing(strings)) address preproccesing: from nama_alamat.preprocessing import Preprocessing preprocessing_alamat = Preprocessing(tipe='alamat') strings = 'JALAN GARUDA IX BLOK C/3 RT 003 RW 002, JAKARTA UTARA, DKI JAKARTA 12110' print(preprocessing_alamat.preprocessing(strings))","title":"Usage"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Preprocessing Module \u00b6 Preprocessing module for Indonesia name and address. dict_files special \u00b6 Dictionary used for preprocessing string. preprocessing \u00b6 Module for preprocessing Indonesia Name and Address. Dictionary for preproccesing on dict_files folder. Roman library used for converting roman number to arabic. Preprocessing \u00b6 Preprocessing class. __init__ ( self , tipe = 'alamat' ) special \u00b6 Class initialization. Parameters: Name Type Description Default tipe str valid value : 'alamat' for address or 'nama' for name. Defaults to 'alamat'. 'alamat' Source code in nama_alamat/preprocessing/preprocessing.py def __init__ ( self , tipe = 'alamat' ): \"\"\"Class initialization. Args: tipe (str, optional): valid value : 'alamat' for address or 'nama' for name. Defaults to 'alamat'. \"\"\" self . tipe = tipe preprocessing ( self , strings ) \u00b6 Preprocessing function. Parameters: Name Type Description Default strings _type_ input string required Returns: Type Description _type_ return preprocessed string Source code in nama_alamat/preprocessing/preprocessing.py def preprocessing ( self , strings ): \"\"\"Preprocessing function. Args: strings (_type_): input string Returns: _type_: return preprocessed string \"\"\" tipe = self . tipe # kata-kata tidak berguna stopword = [ 'please specify' , 'hold mail' , 'holdmail' , 'dummy' , 'unknown' , 'middlename' , 'npwp' , 'qq' , 'sp_xplor' , 'null' , 'anonymous' , 'not_associate' , ] if isinstance ( strings , str ): # lowercase result = strings . lower () # remove non ascii chars result = re . sub ( r '[^\\x00-\\x7f]' , '' , result ) # remove old style name if re . match ( r '^(?:\\w ){2,}[A-z]($|\\W)' , result ): result = '' . join ( result . split ()) # remove inside bracket result = re . sub ( r '\\([^)]*\\)' , '' , result ) # remove stopword result = reduce ( lambda a , b : a . replace ( b , '' ), stopword , result ) if tipe == 'nama' : # remove number result = re . sub ( r '\\d+' , '' , result ) if tipe == 'alamat' : # remove kodepos result = re . sub ( r ' \\d\\d\\d\\d\\d' , '' , result ) # remove punctuation result = re . sub ( r '[^\\w\\s]' , ' ' , result ) # remove whitespace result = result . strip () # remove double space result = re . sub ( r '\\s+' , ' ' , result ) # standardize result = self . standardize ( result ) # remove whitespace result = result . strip () # remove double space result = re . sub ( r '\\s+' , ' ' , result ) # hapus nama 1 kata diulang if tipe == 'nama' : result = [ x . strip () for x in result . split ()] result = ' ' . join ( list ( dict . fromkeys ( result ))) # roman to arabic if tipe == 'alamat' : result = ' ' . join ( [ str ( roman . fromRoman ( x )) if re . match ( \"(^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$)\" , x ) else x for x in result . upper () . split () ] ) . lower () return result else : return strings standardize ( self , strings ) \u00b6 Standardize function. Parameters: Name Type Description Default strings _type_ input string required Returns: Type Description _type_ returning standarized string based on type (name or address) Source code in nama_alamat/preprocessing/preprocessing.py def standardize ( self , strings ): \"\"\"Standardize function. Args: strings (_type_): input string Returns: _type_: returning standarized string based on type (name or address) \"\"\" tipe = self . tipe if tipe == 'alamat' : result = \" \" . join ( dict_alamat . get ( ele , ele ) for ele in strings . split ()) else : result = re . sub ( r '\\s' , '_' , strings ) for i , k in dict_nama . items (): str_from = '(_|^)' + i + '(_|$)' str_to = '_' + k + '_' result = re . sub ( str_from , str_to , result ) result = re . sub ( '_' , ' ' , result ) return result","title":"Modules"},{"location":"api/#preprocessing-module","text":"Preprocessing module for Indonesia name and address.","title":"Preprocessing Module"},{"location":"api/#nama_alamat.preprocessing.dict_files","text":"Dictionary used for preprocessing string.","title":"dict_files"},{"location":"api/#nama_alamat.preprocessing.preprocessing","text":"Module for preprocessing Indonesia Name and Address. Dictionary for preproccesing on dict_files folder. Roman library used for converting roman number to arabic.","title":"preprocessing"},{"location":"api/#nama_alamat.preprocessing.preprocessing.Preprocessing","text":"Preprocessing class.","title":"Preprocessing"},{"location":"api/#nama_alamat.preprocessing.preprocessing.Preprocessing.__init__","text":"Class initialization. Parameters: Name Type Description Default tipe str valid value : 'alamat' for address or 'nama' for name. Defaults to 'alamat'. 'alamat' Source code in nama_alamat/preprocessing/preprocessing.py def __init__ ( self , tipe = 'alamat' ): \"\"\"Class initialization. Args: tipe (str, optional): valid value : 'alamat' for address or 'nama' for name. Defaults to 'alamat'. \"\"\" self . tipe = tipe","title":"__init__()"},{"location":"api/#nama_alamat.preprocessing.preprocessing.Preprocessing.preprocessing","text":"Preprocessing function. Parameters: Name Type Description Default strings _type_ input string required Returns: Type Description _type_ return preprocessed string Source code in nama_alamat/preprocessing/preprocessing.py def preprocessing ( self , strings ): \"\"\"Preprocessing function. Args: strings (_type_): input string Returns: _type_: return preprocessed string \"\"\" tipe = self . tipe # kata-kata tidak berguna stopword = [ 'please specify' , 'hold mail' , 'holdmail' , 'dummy' , 'unknown' , 'middlename' , 'npwp' , 'qq' , 'sp_xplor' , 'null' , 'anonymous' , 'not_associate' , ] if isinstance ( strings , str ): # lowercase result = strings . lower () # remove non ascii chars result = re . sub ( r '[^\\x00-\\x7f]' , '' , result ) # remove old style name if re . match ( r '^(?:\\w ){2,}[A-z]($|\\W)' , result ): result = '' . join ( result . split ()) # remove inside bracket result = re . sub ( r '\\([^)]*\\)' , '' , result ) # remove stopword result = reduce ( lambda a , b : a . replace ( b , '' ), stopword , result ) if tipe == 'nama' : # remove number result = re . sub ( r '\\d+' , '' , result ) if tipe == 'alamat' : # remove kodepos result = re . sub ( r ' \\d\\d\\d\\d\\d' , '' , result ) # remove punctuation result = re . sub ( r '[^\\w\\s]' , ' ' , result ) # remove whitespace result = result . strip () # remove double space result = re . sub ( r '\\s+' , ' ' , result ) # standardize result = self . standardize ( result ) # remove whitespace result = result . strip () # remove double space result = re . sub ( r '\\s+' , ' ' , result ) # hapus nama 1 kata diulang if tipe == 'nama' : result = [ x . strip () for x in result . split ()] result = ' ' . join ( list ( dict . fromkeys ( result ))) # roman to arabic if tipe == 'alamat' : result = ' ' . join ( [ str ( roman . fromRoman ( x )) if re . match ( \"(^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$)\" , x ) else x for x in result . upper () . split () ] ) . lower () return result else : return strings","title":"preprocessing()"},{"location":"api/#nama_alamat.preprocessing.preprocessing.Preprocessing.standardize","text":"Standardize function. Parameters: Name Type Description Default strings _type_ input string required Returns: Type Description _type_ returning standarized string based on type (name or address) Source code in nama_alamat/preprocessing/preprocessing.py def standardize ( self , strings ): \"\"\"Standardize function. Args: strings (_type_): input string Returns: _type_: returning standarized string based on type (name or address) \"\"\" tipe = self . tipe if tipe == 'alamat' : result = \" \" . join ( dict_alamat . get ( ele , ele ) for ele in strings . split ()) else : result = re . sub ( r '\\s' , '_' , strings ) for i , k in dict_nama . items (): str_from = '(_|^)' + i + '(_|$)' str_to = '_' + k + '_' result = re . sub ( str_from , str_to , result ) result = re . sub ( '_' , ' ' , result ) return result","title":"standardize()"},{"location":"changelog/","text":"Changelog \u00b6 [Unreleased] \u00b6 [0.2.7] - 2022-03-18 \u00b6 Added \u00b6 Additional string in dict_nama Change logic for preprocessing repeated word and old typing style ie. 'A L I' [0.2.6] - 2022-03-06 \u00b6 Added \u00b6 Documentation and testing [0.2.5] - 2022-03-06 \u00b6 Added \u00b6 Documentation [0.2.4] - 2022-03-06 [YANKED] \u00b6 Added \u00b6 Documentation [0.2.3] - 2022-03-05 [YANKED] \u00b6 Added \u00b6 Fix bugs [0.2.2] - 2022-03-05 [YANKED] \u00b6 Added \u00b6 Fix changelog [0.2.1] - 2022-03-05 [YANKED] \u00b6 Added \u00b6 Add roman in dependency Updating readme basic usage [0.2.0] - 2022-03-05 [YANKED] \u00b6 Added \u00b6 Adding Preprocessing module [0.1.1] - 2022-03-05 [YANKED] \u00b6 Pre-Alpha","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#027---2022-03-18","text":"","title":"[0.2.7] - 2022-03-18"},{"location":"changelog/#added","text":"Additional string in dict_nama Change logic for preprocessing repeated word and old typing style ie. 'A L I'","title":"Added"},{"location":"changelog/#026---2022-03-06","text":"","title":"[0.2.6] - 2022-03-06"},{"location":"changelog/#added_1","text":"Documentation and testing","title":"Added"},{"location":"changelog/#025---2022-03-06","text":"","title":"[0.2.5] - 2022-03-06"},{"location":"changelog/#added_2","text":"Documentation","title":"Added"},{"location":"changelog/#024---2022-03-06-yanked","text":"","title":"[0.2.4] - 2022-03-06 [YANKED]"},{"location":"changelog/#added_3","text":"Documentation","title":"Added"},{"location":"changelog/#023---2022-03-05-yanked","text":"","title":"[0.2.3] - 2022-03-05 [YANKED]"},{"location":"changelog/#added_4","text":"Fix bugs","title":"Added"},{"location":"changelog/#022---2022-03-05-yanked","text":"","title":"[0.2.2] - 2022-03-05 [YANKED]"},{"location":"changelog/#added_5","text":"Fix changelog","title":"Added"},{"location":"changelog/#021---2022-03-05-yanked","text":"","title":"[0.2.1] - 2022-03-05 [YANKED]"},{"location":"changelog/#added_6","text":"Add roman in dependency Updating readme basic usage","title":"Added"},{"location":"changelog/#020---2022-03-05-yanked","text":"","title":"[0.2.0] - 2022-03-05 [YANKED]"},{"location":"changelog/#added_7","text":"Adding Preprocessing module","title":"Added"},{"location":"changelog/#011---2022-03-05-yanked","text":"Pre-Alpha","title":"[0.1.1] - 2022-03-05 [YANKED]"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/kloworizer/nama_alamat/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Indonesia Name and Address Preprocessing could always use more documentation, whether as part of the official Indonesia Name and Address Preprocessing docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/kloworizer/nama_alamat/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up nama_alamat for local development. Fork the nama_alamat repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/nama_alamat.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/kloworizer/nama_alamat/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_nama_alamat.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/kloworizer/nama_alamat/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Indonesia Name and Address Preprocessing could always use more documentation, whether as part of the official Indonesia Name and Address Preprocessing docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/kloworizer/nama_alamat/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up nama_alamat for local development. Fork the nama_alamat repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/nama_alamat.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/kloworizer/nama_alamat/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_nama_alamat.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Indonesia Name and Address Preprocessor, run this command in your terminal: $ pip install nama_alamat This is the preferred method to install Indonesia Name and Address Preprocessor, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Indonesia Name and Address Preprocessor can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/kloworizer/nama_alamat Or download the tarball : $ curl -OJL https://github.com/kloworizer/nama_alamat/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Indonesia Name and Address Preprocessor, run this command in your terminal: $ pip install nama_alamat This is the preferred method to install Indonesia Name and Address Preprocessor, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Indonesia Name and Address Preprocessor can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/kloworizer/nama_alamat Or download the tarball : $ curl -OJL https://github.com/kloworizer/nama_alamat/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Indonesia Name and Address Preprocessor in a project example of name preproccesing: from nama_alamat.preprocessing import Preprocessing preprocessing_nama = Preprocessing(tipe='nama') strings = 'IR SULAEMAN' print(preprocessing_nama.preprocessing(strings)) address preproccesing: from nama_alamat.preprocessing import Preprocessing preprocessing_alamat = Preprocessing(tipe='alamat') strings = 'JALAN GARUDA IX BLOK C/3 RT 003 RW 002, JAKARTA UTARA, DKI JAKARTA 12110' print(preprocessing_alamat.preprocessing(strings))","title":"Usage"},{"location":"usage/#usage","text":"To use Indonesia Name and Address Preprocessor in a project example of name preproccesing: from nama_alamat.preprocessing import Preprocessing preprocessing_nama = Preprocessing(tipe='nama') strings = 'IR SULAEMAN' print(preprocessing_nama.preprocessing(strings)) address preproccesing: from nama_alamat.preprocessing import Preprocessing preprocessing_alamat = Preprocessing(tipe='alamat') strings = 'JALAN GARUDA IX BLOK C/3 RT 003 RW 002, JAKARTA UTARA, DKI JAKARTA 12110' print(preprocessing_alamat.preprocessing(strings))","title":"Usage"}]}